name: RaceSense Production Deployment

on:
  push:
    branches: [main, production]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      deployment_target:
        description: "Deployment target"
        required: true
        default: "netlify"
        type: choice
        options:
          - netlify
          - vercel
          - aws
          - all

env:
  NODE_VERSION: "18"
  CACHE_KEY: v1-dependencies

jobs:
  # Quality checks
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run typecheck

      - name: Run tests
        run: npm run test

      - name: Run linting
        run: npm run format.fix

  # Build application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        env:
          NODE_ENV: production
          VITE_APP_ENVIRONMENT: production
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 7

  # Deploy to Netlify
  deploy-netlify:
    name: Deploy to Netlify
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event.inputs.deployment_target == 'netlify' || github.event.inputs.deployment_target == 'all'
    environment:
      name: production-netlify
      url: https://racesense.netlify.app
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Deploy to Netlify
        uses: netlify/actions/cli@master
        with:
          args: deploy --prod --dir=dist
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  # Deploy to Vercel
  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event.inputs.deployment_target == 'vercel' || github.event.inputs.deployment_target == 'all'
    environment:
      name: production-vercel
      url: https://racesense.vercel.app
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: "--prod"

  # Deploy to AWS
  deploy-aws:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event.inputs.deployment_target == 'aws' || github.event.inputs.deployment_target == 'all'
    environment:
      name: production-aws
      url: https://racesense.app
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to S3
        run: |
          aws s3 sync dist/ s3://${{ secrets.AWS_S3_BUCKET }} --delete

      - name: Invalidate CloudFront
        if: ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }}
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

  # Performance testing
  lighthouse:
    name: Lighthouse Performance Test
    runs-on: ubuntu-latest
    needs: [deploy-netlify]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."

      - name: Run npm audit
        run: npm audit --audit-level high

  # Notification
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-netlify, deploy-vercel, deploy-aws]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Deployment Success
        if: ${{ needs.deploy-netlify.result == 'success' || needs.deploy-vercel.result == 'success' || needs.deploy-aws.result == 'success' }}
        run: |
          echo "üöÄ RaceSense has been successfully deployed!"
          echo "‚úÖ Netlify: ${{ needs.deploy-netlify.result }}"
          echo "‚úÖ Vercel: ${{ needs.deploy-vercel.result }}"
          echo "‚úÖ AWS: ${{ needs.deploy-aws.result }}"

      - name: Deployment Failure
        if: ${{ needs.deploy-netlify.result == 'failure' || needs.deploy-vercel.result == 'failure' || needs.deploy-aws.result == 'failure' }}
        run: |
          echo "‚ùå RaceSense deployment failed!"
          echo "Netlify: ${{ needs.deploy-netlify.result }}"
          echo "Vercel: ${{ needs.deploy-vercel.result }}"
          echo "AWS: ${{ needs.deploy-aws.result }}"
          exit 1
